package go_srf

import (
	"bytes"
	"encoding/base64"
	"github.com/stretchr/testify/assert"
	"testing"
)

const (
	// some gopher pics
	gopherGif     = "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"
	gopherJpg     = "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"
	gopherPng     = ""
	randomPayload = "iVBORw0KGgoAAAANSUhEUgAAAEkAAABoCAYAAAC9g91PAAAYyElEQVR42u2deXBd9ZXnP+d3l/f0np42S7IlW/IKxgbLhoBtsBMwaxLSCXQggU5PuqsyTc1MZ2qqqOlK9dT0/DM1k5maVCpT01M1mW4qXdMJ2QidBAJJwEAAG9vY2OAFL3iXjK1dek9vu/f+zvxxn2R5k2RbSWMVv6pXpeXpp3u/96zfc37niaoqH68Jl/kYgo9B+hikj0H6GKSPQfoYpKtbiqKVr+D82ENVsdYyWVTyh45Z3D8cNIrV+AajKGJ4aJhcLktvdzfZbJZcPk9v/wCgOI6hKpEglUpTlUziGpdZDQ1kamuoq6sjnU7jOg4ifxiQ5PcdTIZhSG9fL4ePHKGz80O6iwEnifDSaZKZOqqqa5B0LX6qDqslRCIQB7UQ2YggKCOFAjKSJzcyRKGYQ7KDLHY9Fs6ew3XXXce8eXMxjkFEEOTaACkIixw7epJ3d+9l//AAufomalva8WtrUDWUI0UxULkhIwoCqqAq8c81lsD4xmPltGoRBFFLynPQUols10noOcUNdVWsX7ualqa5iJGPIkgKCCMjI2x7+202Hz5O2L6EmrnzCAXCCERcrLEIFtRUzKFU/taCKKiM/VxVx2yPSPweVWKQUERAxRJZwTceyWCYM4f3Mn9khD+6+z5mz2lGxKASy5Zc9Ir/gCCVy0U2b9rExpMnmXXDJyhX11MiQgAjEt+2ghWwCKKjaiEVg23RceZYZLzSaPzHo19HsZQZY7CihKoYDI5CSEDKBPTs283qpMP99z5AIpGEMOLYsaMcO3GCoaFhampqaGmby/VLluAZB5nEuE0KUhhFnDl9ms7OToqlEs1NzbS2tlBTW4ugdHZ28YNfv0jUcStuzWwiq1gsYHEAU4HDqmJF0FgEiKHTMa92DkgVoMb8mFg8UQqD3eRPniQ9UqImkWAkKDHsJ0jOaaF+zgJGogCr4FkPvzxAcfsmPrVqFa++tw9ZuJhUSxPip7CBku88hXNiH3/ywH20t7dfGUg2snxw9DA/2fg7wnkLSDQ2gOui/XlGPjzF8kRI6+x6XvlwgKaONeTVoOLgmRL5052UT3XT4hqSngMCx4p5qG2kYd58IidFCFgTxsozZotGQRJEQLA4jpI/fIg5/d3c0dHB3PZ5ZDLVGANqIV8ocvz4cV59+x0K8xbhz2mjhBKJksJy5OUXuW7dneQSdahY1NhYkq2Q9oTOLa/wtTW3c8Oy6y8PJFXl5Y0b2ZYrk7p+OTl1EGNwrEVUMW7I4J6dpKoaqVq8mCC0uCJkjx9iYX6AtR0rWDB/Ia7noAJilSgM6R8YZNv27ewslGi4cRU5cQ=="
)

type meta struct {
	RecordName     string `json:"recordName"`
	RecordCategory int    `json:"recordCategory"`
}

type sampleRecord struct {
	RecordType uint16
	Meta       *meta
	Data       []byte
}

func from64(s string) []byte {
	b, err := base64.StdEncoding.DecodeString(s)
	if err != nil {
		panic(err)
	}
	return b
}

func toMeta(name string, category int) *meta {
	return &meta{
		RecordName:     name,
		RecordCategory: category,
	}
}

func testDataset() []sampleRecord {
	return []sampleRecord{
		// meta is empty
		{TypeText, nil, []byte("You're bound to get ideas if you go thinkin' about stuff")},

		// sample meta 1
		{TypeText, toMeta("example record 1", 3), []byte("the quick brown fox jumps over the lazy dog")},

		// sample meta 2
		{TypeJSON, toMeta("example record 2", 7), []byte(`{"recordName":"foo", "recordCategory": 65}`)},

		// meta is empty
		{TypeBinary, nil, from64(randomPayload)},

		// meta not empty
		{TypeBinary, toMeta("random stuff", 99), from64(randomPayload)},

		// gopher gif
		{TypeBinary, toMeta("gopher.gif", 20), from64(gopherGif)},

		// gopher jpg
		{TypeBinary, toMeta("gopher.jpg", 21), from64(gopherJpg)},

		// gopher png
		{TypeBinary, toMeta("gopher.png", 22), from64(gopherPng)},
	}
}

func testReadWrite(t *testing.T, dataset []sampleRecord, compress bool) *bytes.Buffer {
	buf := new(bytes.Buffer)

	// write all records
	for _, r := range dataset {
		err := Write(buf, r.RecordType, r.Data, r.Meta, compress)
		assert.NoError(t, err)
	}

	assert.True(t, buf.Len() > 1024)

	// read all records sequentially, compare with original
	reader := bytes.NewReader(buf.Bytes())
	for _, orig := range dataset {
		r, err := Read(reader)
		assert.NoError(t, err)
		assert.Equal(t, orig.RecordType, r.Type())

		if orig.Meta != nil {
			m := meta{}
			assert.NoError(t, UnpackMeta(r, &m))
			assert.Equal(t, *orig.Meta, m)
		}
		assert.Equal(t, orig.Data, r.Bytes())
	}
	return buf
}

func TestReadWrite(t *testing.T) {
	bufUncompressed := testReadWrite(t, testDataset(), false)
	bufCompressed := testReadWrite(t, testDataset(), true)
	assert.True(t, bufCompressed.Len() < bufUncompressed.Len())
}

func TestReadAll(t *testing.T) {
	orig := testDataset()
	bufUncompressed := testReadWrite(t, orig, false)
	reader := bytes.NewReader(bufUncompressed.Bytes())
	records, err := ReadAll(reader)
	assert.NoError(t, err)
	assert.Len(t, records, len(orig))

	for i, r := range records {
		assert.Equal(t, orig[i].RecordType, r.Type())
		if orig[i].Meta != nil {
			m := meta{}
			assert.NoError(t, UnpackMeta(r, &m))
			assert.Equal(t, *orig[i].Meta, m)
		}
		assert.Equal(t, orig[i].Data, r.Bytes())
	}

	// enable compression
	bufCompressed := testReadWrite(t, testDataset(), true)
	reader = bytes.NewReader(bufCompressed.Bytes())
	records, err = ReadAll(reader)
	assert.NoError(t, err)
	assert.Len(t, records, len(orig))

	for i, r := range records {
		assert.Equal(t, orig[i].RecordType, r.Type())
		if orig[i].Meta != nil {
			m := meta{}
			assert.NoError(t, UnpackMeta(r, &m))
			assert.Equal(t, *orig[i].Meta, m)
		}
		assert.Equal(t, orig[i].Data, r.Bytes())
	}
}

func testWriteRecord(t *testing.T, compress bool) {
	orig := testDataset()
	bufUncompressed := testReadWrite(t, orig, compress)
	reader := bytes.NewReader(bufUncompressed.Bytes())
	records, err := ReadAll(reader)
	assert.NoError(t, err)

	// create new buffer, write records to it
	tmp := new(bytes.Buffer)
	for _, v := range records {
		err = WriteRecord(tmp, v, compress)
		assert.NoError(t, err)
	}

	// read records just written from buffer
	reader = bytes.NewReader(tmp.Bytes())
	records, err = ReadAll(reader)
	assert.NoError(t, err)
	assert.Len(t, records, len(orig))
	for i, r := range records {
		assert.Equal(t, orig[i].RecordType, r.Type())
		if orig[i].Meta != nil {
			m := meta{}
			err = UnpackMeta(r, &m)
			assert.NoError(t, err)
			assert.Equal(t, *orig[i].Meta, m)
		}
		assert.Equal(t, orig[i].Data, r.Bytes())
	}
}

func TestWriteRecordUncompressed(t *testing.T) {
	// test without compression
	testWriteRecord(t, false)
	// test with compression
	testWriteRecord(t, true)
}

func TestUnpackJson(t *testing.T) {
	buf := testReadWrite(t, testDataset(), false)
	// record #3 has json payload
	records, err := ReadAll(bytes.NewReader(buf.Bytes()))
	assert.NoError(t, err)
	m := meta{}
	assert.NoError(t, DecodeJson(records[2], &m))
	assert.Equal(t, "foo", m.RecordName)
	assert.Equal(t, 65, m.RecordCategory)

}
